<?xml version="1.0" encoding="utf-8"?>
<ANATELLA version='1.97'>
<GlobalParameters wDirLoc='0' dataDirRead='F:/TIMi/tpc-h/v0/answers' dataDirWrite=':/'>
<Parameters>
<Par name='DATA_SIZE'>1</Par>
<Par name='NATION'>SAUDI ARABIA</Par>
<Par name='OSTATUS'>2</Par>
</Parameters>
</GlobalParameters>
<WorkingSpace>AAAA/wAAAAD9AAAAAgAAAAEAAAFpAAACKfwCAAAAAfsAAAAcAEEAbABsAEEAYwB0AGkAbwBuAHMARABvAGMAawEAAABBAAACKQAAAHgA////AAAAAwAAB4AAAAFv/AEAAAAC+wAAACgAQQBjAHQAaQBvAG4AUAByAG8AcABlAHIAdABpAGUAcwBEAG8AYwBrAQAAAAAAAASvAAACqQD////8AAAEswAAAs0AAAGXAP////oAAAAAAQAAAAL7AAAADgBMAG8AZwBEAG8AYwBrAQAAAAD/////AAAAYAD////7AAAAGgBEAGEAdABhAFQAYQBiAGwAZQBEAG8AYwBrAQAAAAD/////AAABlwD///8AAAYTAAACKQAAAAQAAAAEAAAACAAAAAj8AAAAAQAAAAIAAAAFAAAAFgBtAGEAaQBuAFQAbwBvAGwAQgBhAHIBAAAAAP////8AAAAAAAAAAAAAABAAUgBUAG8AbwBsAGIAYQByAQAAAgv/////AAAAAAAAAAAAAAAaAFAAeQB0AGgAbwBuAFQAbwBvAGwAQgBhAHIBAAACPv////8AAAAAAAAAAAAAABYAdABlAHgAdABUAG8AbwBsAEIAYQByAQAAAnH/////AAAAAAAAAAAAAAAeAGcAcgBvAHUAcABCAG8AeABUAG8AbwBsAEIAYQByAQAABGD/////AAAAAAAAAAA=</WorkingSpace>
<ACTIONS>
<ReadColumnarGel module='MathParser' idx='209' x='4727.36' y='1167.08' columnSelection='1' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/supplier.cgel_anatella&quot;'>
 <ColumnsToRead>
  <c>S_SUPPKEY</c><c>S_NATIONKEY</c><c>S_NAME</c> </ColumnsToRead>
 <CFilterRows >
  <Expression>1</Expression>
  <InputVars>
  </InputVars>
 </CFilterRows>
</ReadColumnarGel>
<ReadColumnarGel module='MathParser' idx='210' x='5647.18' y='809.414' columnSelection='1' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/lineitem.cgel_anatella&quot;'>
 <ColumnsToRead>
  <c>L_ORDERKEY</c><c>L_SUPPKEY</c><c>L_RECEIPTDATE_ET</c><c>L_COMMITDATE_ET</c> </ColumnsToRead>
 <CFilterRows >
  <Expression>1</Expression>
  <InputVars>
  </InputVars>
 </CFilterRows>
</ReadColumnarGel>
<aggregate idx='214' x='4890.58' y='1480' inRAMAlgo='0'>
 <OneAggregate counts='1'>
  <GroupBy>
   <v name='L_ORDERKEY' type='0'/>
  </GroupBy>
  <OutputVars>
   <v name='L_SUPPKEY'/>
  </OutputVars>
 </OneAggregate>
</aggregate>
<ColumnRename module='DefaultActions' idx='215' x='5027.76' y='1479.95'><before>
<c>count</c></before><after>
<c>L_SUPPKEY_countFailed</c></after>
<QuickRename ></QuickRename>
</ColumnRename>
<ReadColumnarGel module='MathParser' idx='216' x='5403.87' y='912.991' columnSelection='1' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/orders.cgel_anatella&quot;'>
 <ColumnsToRead>
  <c>O_ORDERKEY</c><c>O_ORDERSTATUS_INDEX</c> </ColumnsToRead>
 <CFilterRows >
  <Expression>1</Expression>
  <InputVars>
  </InputVars>
 </CFilterRows>
</ReadColumnarGel>
<FilterRows module='MathParser' idx='217' x='5533.7' y='914.921'>
 <Expression>O_ORDERSTATUS ==  OSTATUS</Expression>
 <InputVars>
    <InputVar column='O_ORDERSTATUS_INDEX' label='O_ORDERSTATUS' meta='K'/>
 </InputVars>
</FilterRows>
<ReadColumnarGel module='MathParser' idx='218' x='4600.63' y='1268.28' columnSelection='1' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/nation.cgel_anatella&quot;'>
 <ColumnsToRead>
  <c>N_NATIONKEY</c><c>N_NAME</c> </ColumnsToRead>
 <CFilterRows >
  <Expression>1</Expression>
  <InputVars>
  </InputVars>
 </CFilterRows>
</ReadColumnarGel>
<FilterRows module='MathParser' idx='219' x='4731.15' y='1265.94'>
 <Expression>N_NAME == NATION</Expression>
 <InputVars>
    <InputVar column='N_NAME' isNumber='0'/>
 </InputVars>
</FilterRows>
<Join module='DefaultActions' idx='227' x='5143.33' y='1047.32' joinMode='0' keyA='L_ORDERKEY' new='1'>
<SlaveKeys><c>L_ORDERKEY</c><c>L_ORDERKEY</c></SlaveKeys>
<Prefixes><c></c><c></c><c></c></Prefixes>
</Join>
<aggregate idx='235' x='5465.27' y='1049.13' inRAMAlgo='1'>
 <OneAggregate counts='1'>
  <GroupBy>
   <v name='S_NAME' type='0'/>
  </GroupBy>
  <OutputVars>
  </OutputVars>
 </OneAggregate>
</aggregate>
<ColumnRename module='DefaultActions' idx='236' x='5594.28' y='1049.25'><before>
<c>count</c></before><after>
<c>numwait</c></after>
<QuickRename ></QuickRename>
</ColumnRename>
<sort idx='237' x='5719.49' y='1049.11' action='S'>
  <field type='9'>numwait</field>
  <field type='A'>S_NAME</field>
</sort>
<MultiJoin module='DefaultActions' idx='265' x='5004.19' y='1045.38'>
  <Join pin='1' mainKey='L_SUPPKEY' slaveKey='S_SUPPKEY' prefix='' copyAll='0' inner='1'>
  <c>S_NAME</c>
  </Join>
</MultiJoin>
<RunToFinishLine idx='273' x='6091.45' y='501.575' nPinIn='53'/>
<FilterRows module='MathParser' idx='275' x='5845.71' y='1049.31' truncate='1'>
 <Expression>_n &lt; 100</Expression>
 <InputVars>
 </InputVars>
</FilterRows>
<writeCSV idx='276' x='5963.78' y='1048.85' sep=',' segmentSize='0.1' filename='q21_out.txt'/>
<ReadColumnarGel module='MathParser' idx='277' x='4363.72' y='1377.18' columnSelection='1' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/lineitem.cgel_anatella&quot;'>
 <ColumnsToRead>
  <c>L_ORDERKEY</c><c>L_SUPPKEY</c> </ColumnsToRead>
 <CFilterRows >
  <Expression>1</Expression>
  <InputVars>
  </InputVars>
 </CFilterRows>
</ReadColumnarGel>
<ReadColumnarGel module='MathParser' idx='278' x='4291.65' y='1476.99' columnSelection='1' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/lineitem.cgel_anatella&quot;'>
 <ColumnsToRead>
  <c>L_ORDERKEY</c><c>L_SUPPKEY</c><c>L_RECEIPTDATE_ET</c><c>L_COMMITDATE_ET</c> </ColumnsToRead>
 <CFilterRows >
  <Expression>1</Expression>
  <InputVars>
  </InputVars>
 </CFilterRows>
</ReadColumnarGel>
<FilterRows module='MathParser' idx='279' x='4616.75' y='1478.6'>
 <Expression>r>c</Expression>
 <InputVars>
    <InputVar column='L_RECEIPTDATE_ET' label='r' meta='K'/>
    <InputVar column='L_COMMITDATE_ET' label='c' meta='K'/>
 </InputVars>
</FilterRows>
<Join module='DefaultActions' idx='281' x='5803.24' y='815.341' joinMode='1' keyA='L_ORDERKEY' new='1'>
<SlaveKeys><c>O_ORDERKEY</c></SlaveKeys>
<Prefixes><c></c><c></c></Prefixes>
</Join>
<SelectColumns module='DefaultActions' idx='291' x='5665.92' y='913.991' keep='1'>
 <c>O_ORDERKEY</c>
</SelectColumns>
<FilterRows module='MathParser' idx='293' x='4864.93' y='1046.61'>
 <Expression>r>c</Expression>
 <InputVars>
    <InputVar column='L_RECEIPTDATE_ET' label='r' meta='K'/>
    <InputVar column='L_COMMITDATE_ET' label='c' meta='K'/>
 </InputVars>
</FilterRows>
<aggregate idx='296' x='4743.41' y='1370.97' inRAMAlgo='0'>
 <OneAggregate>
  <GroupBy>
   <v name='L_ORDERKEY' type='0'/>
   <v name='L_SUPPKEY' type='0'/>
  </GroupBy>
  <OutputVars>
  </OutputVars>
 </OneAggregate>
</aggregate>
<aggregate idx='297' x='4880.25' y='1372.8' inRAMAlgo='0'>
 <OneAggregate counts='1'>
  <GroupBy>
   <v name='L_ORDERKEY' type='0'/>
  </GroupBy>
  <OutputVars>
  </OutputVars>
 </OneAggregate>
</aggregate>
<ColumnRename module='DefaultActions' idx='298' x='5015.27' y='1374.45'><before>
<c>count</c></before><after>
<c>L_SUPPKEY_count</c></after>
<QuickRename ></QuickRename>
</ColumnRename>
<aggregate idx='301' x='4744.79' y='1480.18' inRAMAlgo='0'>
 <OneAggregate>
  <GroupBy>
   <v name='L_ORDERKEY' type='0'/>
   <v name='L_SUPPKEY' type='0'/>
  </GroupBy>
  <OutputVars>
  </OutputVars>
 </OneAggregate>
</aggregate>
<FilterRows module='MathParser' idx='305' x='5310.51' y='1048.78'>
 <Expression>count>1 &amp;&amp; countFailed==1 
</Expression>
 <InputVars>
    <InputVar column='L_SUPPKEY_count' label='count'/>
    <InputVar column='L_SUPPKEY_countFailed' label='countFailed'/>
 </InputVars>
</FilterRows>
<writeGel idx='306' x='5952.58' y='814.301' nThread='3' file=':/temp.gel_anatella'/>
<readGel idx='307' x='4727.13' y='1038.66' nBlockForward='2' fileName=':/temp.gel_anatella'/>
<readGel idx='308' x='4588.7' y='1371.94' nBlockForward='2' fileName=':/temp.gel_anatella'/>
<readGel idx='309' x='4479.67' y='1477.04' nBlockForward='2' fileName=':/temp.gel_anatella'/>
<readCSV idx='310' x='5723.73' y='1258.29' sep=',' fillInEOL='0' fileName='q21_out.txt'/>
<inlineTable idx='313' x='5577.29' y='511.771'>
<ColumnNames><c>Names</c><c>Target</c></ColumnNames>
<Rows>
 <r><c>OSTATUS</c><c>F</c></r>
</Rows>
</inlineTable>
<readGel idx='314' x='5583.7' y='609.517' fileName='&gt;&quot;:/../../&quot; + DATA_SIZE + &quot;GB_anatella/orders_orderstatus_index_conversion.gel_anatella&quot;'/>
<MultiJoin module='DefaultActions' idx='315' x='5731.3' y='513.568'>
  <Join pin='1' mainKey='Target' slaveKey='O_ORDERSTATUS' prefix=''>
    </Join>
</MultiJoin>
<Generic idx='316' x='5864.1' y='509.51' id='setGlobalParameters'
  longName='set the value of some global Parameters'
  le='1438699377232'
  image='/setGlobalParameters.png'
  author='Frank Vanden Berghen'
  revision='0.08'
  tags='800_Other'>
<Description>
&lt;html&gt;
Set the value of some Global Parameters.&lt;br /&gt;&lt;br /&gt;
The input table contains 2 columns:&lt;ol&gt;
&lt;li&gt;The name of the Global Parameters to set.&lt;/li&gt;
&lt;li&gt;The new value of the Global Parameter.&lt;/li&gt;&lt;/ol&gt;
If the second column is omitted, the Global Parameter is reset to an empty string.&lt;br /&gt;
&lt;br /&gt;
The behavior is:&lt;ol&gt;
&lt;li&gt;NEW: Set or Update all Global Paramaters and then continue. The input table is not forwarded to the ouput.&lt;/li&gt;
&lt;li&gt;OLD: Set one Global Paramaters and directly forward the input row to the ouput&lt;/li&gt;&lt;/ol&gt;
</Description>
<Parameters>
  <Parameter id='parName' text='The Global Parameter Names' type='onecolumn'><meta>0</meta><data>Names</data></Parameter>
  <Parameter id='parValue' text='The Global Parameter Values' type='onecolumn'><meta>0</meta><data>O_ORDERSTATUS_INDEX</data></Parameter>
  <Parameter id='setOnlyIfEmpty' text='Only set value if Global Parameter is empty' type='bool'>0</Parameter>
  <Parameter id='behavior' text='Behavior' type='combobox'><meta>&lt;i&gt;New Behavior&lt;/i&gt;&lt;i&gt;Old Behavior&lt;/i&gt;</meta><data>0</data></Parameter>
</Parameters>
<Script>
function init()
{
    if (behavior==0) return 0;
    var r=getCurrentRow();
    if (!r.isNull) setOutputRowSize(0,r.nColumn);
    return 0;
}

function setGP(name,r)
{
    if (parValue&lt;0)
    {
        var assign=new Function(name+"=\"\";");
        assign();
    } else
    {
        var t=""+r.col(parValue);
        t=t.replace(new RegExp("\\\\", 'g'), "\\\\");
        t=t.replace(new RegExp("\"", 'g'), "\\\"");
        t=t.replace(new RegExp("\n", 'g'), "");
        t=t.replace(new RegExp("\r", 'g'), "");
        t=name+"=\""+t+"\";"
        var assign=new Function(t);
        assign();
    }
}

function setGP2(r)
{
   var name=r.col(parName);
    var testIfExists=new Function("return typeof("+name+");");
    if (testIfExists()=="undefined") { newGlobalVar(name); setGP(name,r); return;  }
    if (!setOnlyIfEmpty) { setGP(name,r); return; }
    var getValue=new Function("return "+name+";");
    if (getValue()!="") setGP(name,r);
}

function run()
{
    if (behavior==0)
    {
        for(;;)
        {
            var r=getNextRow();
            if (r.isNull) return 1;
            if (userAskedAbort()) return 1;
            setGP2(r);
        }
    }
    
    var r=getNextRow();
    if (r.isNull) return 1;
    r.write(); 
    writeEOL();
    setGP2(r);
    return 0;
}
</Script>
</Generic>
<readCSV idx='317' x='5719.39' y='1168.02' sep='|' fillInEOL='0' fileName=':/../../../answers/q21.out'/>
<Join module='DefaultActions' idx='318' x='4866.15' y='1165.64' joinMode='1' keyA='S_NATIONKEY' new='1'>
<SlaveKeys><c>N_NATIONKEY</c></SlaveKeys>
<Prefixes><c></c><c></c></Prefixes>
</Join>
<Generic idx='320' x='5945.31' y='1166.06' id='validate'
  longName='validate'
  nPinIn='2'
  le='1496494323150'
  image='validate.png'
  author='Frank Vanden Berghen'
  revision='0.23'
  tags='200_Cleaning'
  pdfDestination='5_6_3_table_validate'>
<Description>
&lt;html&gt;
This operator compares the 2 tables given on the 2 input pins.&lt;br/&gt;
Only the selected columns will be compared.&lt;br/&gt;
&lt;br/&gt;
The output of this operator is one unique row that contains: 
&lt;ul&gt;
&lt;li&gt;In the first column: the user-supplied &quot;short description&quot; of the performed test.&lt;/li&gt;
&lt;li&gt;In the second column: 
&lt;ul&gt;
&lt;li&gt;If the comparison is successful (i.e. the selected columns of the 2 tables matches), then you obtain, the string &quot;OK&quot;.&lt;/li&gt;
&lt;li&gt;If the comparison failed, then you obtain a short description of the &quot;mismatch&quot;.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;
&lt;/ul&gt;
</Description>
<Parameters>
  <Parameter id='columnsToTestS' text='Columns to validate (Strings or Unknowns)' type='manycolumns'><meta>-1</meta><data><c>s_name</c><c>numwait</c></data></Parameter>
  <Parameter id='columnsToTestN' text='Columns to validate (Numbers)' type='manycolumns'><meta>-1</meta><data></data></Parameter>
  <Parameter id='tn' text='Treshold when comparing 2 numbers' type='string'>1e-5</Parameter>
  <Parameter id='testName' text='A short description of the test performed' type='string'>Comparison check ok</Parameter>
  <Parameter id='idAbort' text='Abort execution on Error?' type='bool'>0</Parameter>
  <Parameter id='idRelaxedNull' text='Treat NULL as the same as a Zero-Length String' type='bool'>1</Parameter>
</Parameters>
<Script>
var nRow;
var idxVarsRefN,idxVarsRefS;
var idxVarsTestN,idxVarsTestS;

function outputARow(message)
{
       if ((message!="OK")&amp;&amp;idAbort)
       {
            throw message;
       }
       var r=new Row(2);
       rowSetColumnName(r,0,"Test Name");
       rowSetColumnName(r,1,"Result");
       r.setColumn(0,testName);
       r.setColumn(1,message);
       r.write();
       writeEOL();
}

function init()
{
   if (columnsToTestN.length+columnsToTestS.length==0) throw("No Column to validate??");
   nRow=1;
   var r0=getCurrentRow(0);
   var r1=getCurrentRow(1);
   idxVarsRefN=rowGetIndexOfColumn(r0,columnsToTestN);
   idxVarsTestN=rowGetIndexOfColumn(r1,columnsToTestN);
   idxVarsRefS=rowGetIndexOfColumn(r0,columnsToTestS);
   idxVarsTestS=rowGetIndexOfColumn(r1,columnsToTestS);
   if (columnsToTestN.length>0)
   {
      if (idxVarsRefN.length==0) throw("''Number column'' not found in reference");
      if (idxVarsTestN.length==0) throw("''Number column'' not found in test");
   } else
   {
        idxVarsRefN=new Array();
        idxVarsTestN=new Array();
   }

   if (columnsToTestS.length>0)
   {
        if (idxVarsRefS.length==0) throw("''String column'' not found in reference");
        if (idxVarsTestS.length==0) throw("''String column'' not found in test");
   }

   var ii=idxVarsRefS.length;
   while(ii--)
   {
       i=idxVarsRefS[ii];
       if (rowGetMetaType(r0,i)=='F')
       {
            idxVarsRefN.push(i);
            idxVarsTestN.push(idxVarsTestS[ii]);
            idxVarsRefS.splice(ii,1);
            idxVarsTestS.splice(ii,1);
       }
   }
   setOutputRowSize(0,2);
   tn=Number(tn);
   return 0;
}

function run()
{
   var rRef=getNextRow(0);
   var rTest=getNextRow(1);
   if (rRef.isNull &amp;&amp; rTest.isNull)
   {
       outputARow("OK");
       return 1;
   }
   if (rRef.isNull)
   {
       outputARow("ERROR: test table is to long (more than "+nRow+" rows");
       return 1;
   }
   if (rTest.isNull)
   {
       outputARow("ERROR: test table is too short");
       return 1;
   }

   var i,a,b,an,bn,ii;
   for(i=0;i&lt;idxVarsRefS.length;i++)
   {
 //       cr=rRef.col(idxVarsRefS[i]);
//       ct=rTest.col(idxVarsTestS[i]);
//        if (!(cr==ct))
        if (!(rRef.col(idxVarsRefS[i])==rTest.col(idxVarsTestS[i])))
        {
             if (idRelaxedNull)
             {
                    a=rRef.col(idxVarsRefS[i]);
                    b=rTest.col(idxVarsTestS[i]);
                    if (((a==null)&amp;&amp;(b==""))||((b==null)&amp;&amp;(a=="")))
                        continue;
             }
             ii=idxVarsRefS[i];
             a=rRef.col(idxVarsRefS[i]);
             b=rTest.col(idxVarsTestS[i]);
             outputARow("ERROR: Mismatch on row "+nRow+", col '"+rowGetColumnName(rRef,ii)+"': Ref= '"+a+"'(len="+(a==null?"n/a":a.length)+
                          ") Test='"+b+"'(len="+(b==null?"n/a":b.length)+")");
             return 1;
        }
   }
   for(i=0;i&lt;idxVarsRefN.length;i++)
   {
        a=rRef.col(idxVarsRefN[i]);
        b=rTest.col(idxVarsTestN[i]);
        if (((a==null)&amp;&amp;(b!=null))||((b==null)&amp;&amp;(a!=null)))
        {
             if (idRelaxedNull)
             {
                    if (((a==null)&amp;&amp;(b==""))||((b==null)&amp;&amp;(a=="")))
                        continue;
             }
             outputARow("ERROR: Mismatch on row "+nRow+", col '"+rowGetColumnName(rRef,ii)+"': Ref= '"+a+
                          "' Test='"+b+"'");
             return 1;
        }
        an=Number(a);
        bn=Number(b);
        if ((Math.abs(an-bn)/(1+Math.max(Math.abs(an),Math.abs(bn))))>tn)
        {
             ii=idxVarsRefN[i];
             outputARow("ERROR: Mismatch on row "+nRow+", col '"+rowGetColumnName(rRef,ii)+"': Ref= '"+a+
                          "' Test='"+b+"'");
             return 1;
        }
   }
   nRow++;
   return 0;
}
</Script>
</Generic>
<ColumnRename module='DefaultActions' idx='321' x='5845.12' y='1255.26'><before>
<c>S_NAME</c></before><after>
<c>s_name</c></after>
<QuickRename ></QuickRename>
</ColumnRename>
</ACTIONS>
<CONNECTORS>
<Connection idxSrc='214' idxDest='215'/>
<Connection idxSrc='216' idxDest='217'/>
<Connection idxSrc='218' idxDest='219'/>
<Connection idxSrc='236' idxDest='237'/>
<Connection idxSrc='235' idxDest='236'/>
<Connection idxSrc='237' idxDest='275'/>
<Connection idxSrc='275' idxDest='276'/>
<Connection idxSrc='215' idxDest='227' idxPinIn='2'/>
<Connection idxSrc='210' idxDest='281'/>
<Connection idxSrc='217' idxDest='291'/>
<Connection idxSrc='291' idxDest='281' idxPinIn='1'/>
<Connection idxSrc='296' idxDest='297'/>
<Connection idxSrc='297' idxDest='298'/>
<Connection idxSrc='298' idxDest='227' idxPinIn='1'/>
<Connection idxSrc='279' idxDest='301'/>
<Connection idxSrc='301' idxDest='214'/>
<Connection idxSrc='227' idxDest='305'/>
<Connection idxSrc='305' idxDest='235'/>
<Connection idxSrc='307' idxDest='293'/>
<Connection idxSrc='308' idxDest='296'/>
<Connection idxSrc='309' idxDest='279'/>
<Connection idxSrc='306' idxDest='273' idxPinIn='26'/>
<Connection idxSrc='313' idxDest='315'/>
<Connection idxSrc='314' idxDest='315' idxPinIn='1'/>
<Connection idxSrc='315' idxDest='316'/>
<Connection idxSrc='316' idxDest='273'/>
<Connection idxSrc='209' idxDest='318'/>
<Connection idxSrc='219' idxDest='318' idxPinIn='1'/>
<Connection idxSrc='318' idxDest='265' idxPinIn='1'/>
<Connection idxSrc='317' idxDest='320'/>
<Connection idxSrc='310' idxDest='321'/>
<Connection idxSrc='321' idxDest='320' idxPinIn='1'/>
<Connection idxSrc='281' idxDest='306'/>
<Connection idxSrc='293' idxDest='265'/>
<Connection idxSrc='265' idxDest='227'/>
<Connection idxSrc='276' idxDest='273' idxPinIn='45'/>
</CONNECTORS>
<TEXTANNOTATIONS>
  <Annotation x='4723.74' y='1129.83' size='16' anchor='209'>SUPPLIER</Annotation>
  <Annotation x='5641.68' y='754.054' size='16' anchor='210'>LINEITEM</Annotation>
  <Annotation x='5403.81' y='864.452' size='16' anchor='216'>ORDERS</Annotation>
  <Annotation x='4612.26' y='1229.53' size='16' anchor='218'>NATION</Annotation>
  <Annotation x='5044.47' y='1330.84' size='16' anchor='298'>line1</Annotation>
  <Annotation x='5048.02' y='1560.53' size='16' anchor='215'>line2</Annotation>
  <Annotation x='5805.37' y='761.096' size='16'>flineitem</Annotation>
  <Annotation x='4397.72' y='1344.18' size='16' anchor='277'>plineitem</Annotation>
  <Annotation x='5011.82' y='994.169' size='20' anchor='265'>inner join</Annotation>
  <Annotation x='4286.35' y='1557.3' size='16' anchor='278'>plineitem</Annotation>
  <Annotation x='5139.79' y='1392.89' size='14'>count distinct suppliers in order</Annotation>
  <Annotation x='5141.97' y='1481.03' size='14'>count distinct &quot;failed&quot; suppliers in order</Annotation>
  <Annotation x='4882.23' y='960.206' size='14' anchor='293'>only the
&quot;failed&quot; 
suppliers</Annotation>
  <Annotation x='5256' y='1139.36' size='14' anchor='305'>all the &quot;failed&quot; suppliers in
orders where there are 
several suppliers and only
one &quot;failed&quot; supplier</Annotation>
</TEXTANNOTATIONS>
<GROUPBOXANNOTATIONS>
  <Groupbox x='5543.94' y='498.221' w='453.056' h='206.063' color='#afeeee'/>
</GROUPBOXANNOTATIONS>
</ANATELLA>
